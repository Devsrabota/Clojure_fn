; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd /Users/vladimirsalaev/getting-started ; lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless ; popd
; Using host:port 127.0.0.1:59950 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉getting-started.core꞉>  ; Use `alt+enter` to evaluate
clj꞉getting-started.core꞉> 
; Jack-in done.
clj꞉getting-started.core꞉> 
; nREPL Connection was closed
; Using host:port localhost:59966 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user-activate꞉> 
clj꞉user-activate꞉> 
; Creating cljs repl session...
; Connecting cljs repl: joyride...
;   The Calva Connection Log might have more connection progress information.
; Connected session: cljs
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.cljs'
nil
cljs꞉user-activate꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
cljs꞉user-activate꞉> 
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd /Users/vladimirsalaev/getting-started ; lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless ; popd
; nREPL Connection was closed
; Using host:port 127.0.0.1:59987 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉getting-started.core꞉> 
clj꞉getting-started.core꞉> 
; Jack-in done.
clj꞉getting-started.core꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen + ClojureScript built-in for browser" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd /Users/vladimirsalaev/getting-started ; lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :dependencies conj '[cider/piggieback,"0.5.3"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.piggieback/wrap-cljs-repl"]' -- with-profile +uberjar repl :headless ; popd
; Using host:port 127.0.0.1:60007 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉getting-started.core꞉> 
clj꞉getting-started.core꞉> 
; Creating cljs repl session...
; Connecting cljs repl: Leiningen + ClojureScript built-in for browser...
;   The Calva Connection Log might have more connection progress information.
; Execution error (FileNotFoundException) at user/eval5847 (form-init12913149222194512864.clj:1).
Could not locate cljs/repl/browser__init.class, cljs/repl/browser.clj or cljs/repl/browser.cljc on classpath.
; Failed starting cljs repl
; Jack-in done.
clj꞉getting-started.core꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd /Users/vladimirsalaev/getting-started ; lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless ; popd
; Using host:port 127.0.0.1:60027 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉getting-started.core꞉> 
clj꞉getting-started.core꞉> 
; Jack-in done.
clj꞉getting-started.core꞉> 
clj꞉getting-started.core꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd /Users/vladimirsalaev/getting-started ; lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless ; popd
; Using host:port 127.0.0.1:60071 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉getting-started.core꞉> 
clj꞉getting-started.core꞉> 
; Jack-in done.
clj꞉getting-started.core꞉> 
2
clj꞉getting-started.core꞉> 
Hi
nil
clj꞉getting-started.core꞉> 
#'getting-started.core/-main
clj꞉getting-started.core꞉> 
2
nil
clj꞉getting-started.core꞉> 
3
nil
clj꞉getting-started.core꞉> 
#'getting-started.core/say-hello
clj꞉getting-started.core꞉> 
"HelloDevs"
clj꞉getting-started.core꞉> 
"HelloDevs"
clj꞉getting-started.core꞉> 
#'getting-started.core/-main
clj꞉getting-started.core꞉> 
#'getting-started.core/devs
clj꞉getting-started.core꞉> 
#'getting-started.core/devs
clj꞉getting-started.core꞉> 
#'getting-started.core/devs
clj꞉getting-started.core꞉> 
#'getting-started.core/devs
clj꞉getting-started.core꞉> 
#'getting-started.core/say-hello
clj꞉getting-started.core꞉> 
#'getting-started.core/-main
clj꞉getting-started.core꞉> 
; Syntax error macroexpanding clojure.core/fn at (src/getting_started/core.clj:6:1).
; "Name Devs" - failed: vector? at: [:fn-tail :arity-1 :params] spec: :clojure.core.specs.alpha/param-list
; "Name Devs" - failed: (or (nil? %) (sequential? %)) at: [:fn-tail :arity-n] spec: :clojure.core.specs.alpha/params+body
clj꞉getting-started.core꞉> 
; Syntax error macroexpanding clojure.core/fn at (src/getting_started/core.clj:6:1).
; "Name Devs" - failed: vector? at: [:fn-tail :arity-1 :params] spec: :clojure.core.specs.alpha/param-list
; "Name Devs" - failed: (or (nil? %) (sequential? %)) at: [:fn-tail :arity-n] spec: :clojure.core.specs.alpha/params+body
clj꞉getting-started.core꞉> 
#function[getting-started.core/eval8034/devs--8035]
clj꞉getting-started.core꞉> 
#'getting-started.core/say-hello
clj꞉getting-started.core꞉> 
#'getting-started.core/say-hello
clj꞉getting-started.core꞉> 
#'getting-started.core/-main
clj꞉getting-started.core꞉> 
#'getting-started.core/devs
clj꞉getting-started.core꞉> 
#'getting-started.core/devs
clj꞉getting-started.core꞉> 
#'getting-started.core/devs
clj꞉getting-started.core꞉> 
#'getting-started.core/devs
clj꞉getting-started.core꞉> 
#'getting-started.core/say-hello
clj꞉getting-started.core꞉> 
#'getting-started.core/-main
clj꞉getting-started.core꞉> 
#'getting-started.core/say-hello
clj꞉getting-started.core꞉> 
#'getting-started.core/devs
clj꞉getting-started.core꞉> 
#'getting-started.core/say-hello
clj꞉getting-started.core꞉> 
#'getting-started.core/-main
clj꞉getting-started.core꞉> 
Hello Devs
nil
clj꞉getting-started.core꞉> 
#'getting-started.core/devs
clj꞉getting-started.core꞉> 
; Syntax error compiling at (src/getting_started/core.clj:16:3).
; Unable to resolve symbol: say-hello in this context
clj꞉getting-started.core꞉> 
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd /Users/vladimirsalaev/getting-started ; lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless ; popd
; nREPL Connection was closed
; Using host:port 127.0.0.1:49833 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉getting-started.core꞉> 
clj꞉getting-started.core꞉> 
; Jack-in done.
clj꞉getting-started.core꞉> 
#'getting-started.module/devs
clj꞉getting-started.module꞉> 
#'getting-started.module/say-hello
clj꞉getting-started.module꞉> 
#'getting-started.core/-main
clj꞉getting-started.core꞉> 
; Syntax error compiling at (test/getting_started/core_test.clj:7:1).
; Unable to resolve symbol: deftest in this context
clj꞉getting-started.core-test꞉> 
(defn -main
  "I don't do a whole lot ... yet."
  [& args]
  (say-hello (-> devs :name)))
; Syntax error compiling at (.calva/output-window/output.calva-repl:267:3).
; Unable to resolve symbol: say-hello in this context
clj꞉getting-started.core-test꞉> 
#'getting-started.core/-main
clj꞉getting-started.core꞉> 
; Running all project tests…
; No tests found. 😱, ns: 0, vars: 0
clj꞉getting-started.core꞉> 
; Syntax error compiling at (test/getting_started/core_test.clj:7:1).
; Unable to resolve symbol: deftest in this context
clj꞉getting-started.core-test꞉> 
#'getting-started.module/newdevs
clj꞉getting-started.module꞉> 
#'getting-started.module/say-hello
clj꞉getting-started.module꞉> 
#'getting-started.module/git-hello
clj꞉getting-started.module꞉> 
